#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤
"""

import sys
import os
sys.path.append('.')

from agents import AgentRouter
from intent_classifier import intent_classifier

def test_routing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤"""
    router = AgentRouter()
    
    test_cases = [
        # –í–æ–ø—Ä–æ—Å—ã –æ —Ä–∞–±–æ—Ç–µ/–∫–∞—Ä—å–µ—Ä–µ - –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ –∫ CareerNavigator
        {
            "message": "—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Ä–∞–±–æ—Ç–µ",
            "expected_agent": "CareerNavigator",
            "description": "–û–±—â–∏–π –≤–æ–ø—Ä–æ—Å –æ —Ä–∞–±–æ—Ç–µ"
        },
        {
            "message": "–∫–∞–∫ –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É –¥–ª—è –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤",
            "expected_agent": "CareerNavigator", 
            "description": "–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã –¥–ª—è –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤"
        },
        {
            "message": "–∫–∞–∫–∏–µ –µ—Å—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏",
            "expected_agent": "CareerNavigator",
            "description": "–í–æ–ø—Ä–æ—Å –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö"
        },
        
        # –°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã - –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ –∫ UniNav
        {
            "message": "–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤",
            "expected_agent": "UniNav",
            "description": "–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"
        },
        {
            "message": "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π",
            "expected_agent": "UniNav",
            "description": "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π"
        },
        {
            "message": "–≥–¥–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ",
            "expected_agent": "UniNav",
            "description": "–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–ª–µ–Ω–∏–π"
        },
        
        # –í–æ–ø—Ä–æ—Å—ã –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è - –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ –∫ AI-Abitur
        {
            "message": "–∫–∞–∫ –ø–æ—Å—Ç—É–ø–∏—Ç—å –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç",
            "expected_agent": "AI-Abitur",
            "description": "–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç"
        },
        {
            "message": "–¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è",
            "expected_agent": "AI-Abitur",
            "description": "–î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è"
        },
        
        # –ö–∞–¥—Ä–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã - –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ –∫ KadrAI
        {
            "message": "–æ—Ñ–æ—Ä–º–∏—Ç—å –æ—Ç–ø—É—Å–∫, —è —Ä–∞–±–æ—Ç–∞—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º",
            "expected_agent": "KadrAI",
            "description": "–ö–∞–¥—Ä–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"
        },
        {
            "message": "–≤–æ–ø—Ä–æ—Å—ã –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
            "expected_agent": "KadrAI", 
            "description": "–í–æ–ø—Ä–æ—Å—ã –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ"
        },
        
        # –í–æ–ø—Ä–æ—Å—ã –æ–±—â–µ–∂–∏—Ç–∏—è - –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ –∫ UniRoom
        {
            "message": "–ø—Ä–æ–±–ª–µ–º—ã –≤ –æ–±—â–µ–∂–∏—Ç–∏–∏",
            "expected_agent": "UniRoom",
            "description": "–ü—Ä–æ–±–ª–µ–º—ã –≤ –æ–±—â–µ–∂–∏—Ç–∏–∏"
        },
        {
            "message": "–∑–∞—Å–µ–ª–∏—Ç—å—Å—è –≤ –æ–±—â–µ–∂–∏—Ç–∏–µ",
            "expected_agent": "UniRoom",
            "description": "–ó–∞—Å–µ–ª–µ–Ω–∏–µ –≤ –æ–±—â–µ–∂–∏—Ç–∏–µ"
        }
    ]
    
    print("="*70)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ú–ê–†–®–†–£–¢–ò–ó–ê–¶–ò–ò –ê–ì–ï–ù–¢–û–í")
    print("="*70)
    
    passed = 0
    failed = 0
    
    for i, test in enumerate(test_cases, 1):
        print(f"\n–¢–µ—Å—Ç {i}: {test['description']}")
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: '{test['message']}'")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
        try:
            result = router.route_message(test['message'], 'ru')
            selected_agent = result.get('agent_name', 'Unknown')
            confidence = result.get('confidence', 0.0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º ML-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç–¥–µ–ª—å–Ω–æ
            ml_scores = intent_classifier.classify_intent(test['message'], 'ru')
            best_ml_agent = max(ml_scores.items(), key=lambda x: x[1]) if ml_scores else ('None', 0.0)
            
            print(f"–í—ã–±—Ä–∞–Ω –∞–≥–µ–Ω—Ç: {selected_agent} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.3f})")
            print(f"ML –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {best_ml_agent[0]} ({best_ml_agent[1]:.3f})")
            print(f"–í—Å–µ ML –æ—Ü–µ–Ω–∫–∏: {ml_scores}")
            
            if selected_agent == test['expected_agent']:
                print(f"‚úÖ –ü–†–û–ô–î–ï–ù - –û–∂–∏–¥–∞–ª—Å—è {test['expected_agent']}")
                passed += 1
            else:
                print(f"‚ùå –ü–†–û–í–ê–õ–ï–ù - –û–∂–∏–¥–∞–ª—Å—è {test['expected_agent']}, –ø–æ–ª—É—á–µ–Ω {selected_agent}")
                failed += 1
                
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê - {str(e)}")
            failed += 1
    
    print("\n" + "="*70)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*70)
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    print(f"–í—Å–µ–≥–æ: {passed + failed}")
    
    if failed > 0:
        print(f"\n‚ö†Ô∏è –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é –¥–ª—è {failed} —Å–ª—É—á–∞–µ–≤")
    else:
        print(f"\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    
    return failed == 0

if __name__ == '__main__':
    success = test_routing()
    sys.exit(0 if success else 1)