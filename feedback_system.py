#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–ª—è ML Router
Feedback System for ML Router Self-Learning
"""

import json
import logging
from datetime import datetime
from typing import Dict, Any, Optional
from ml_router import ml_router

logger = logging.getLogger(__name__)

class FeedbackCollector:
    """–°–±–æ—Ä –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è ML Router"""
    
    def __init__(self):
        self.pending_feedback = {}  # message_id -> interaction_data
    
    def register_interaction(self, message_id: str, message: str, 
                           selected_agent: str, user_id: str) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        self.pending_feedback[message_id] = {
            'message': message,
            'selected_agent': selected_agent,
            'user_id': user_id,
            'timestamp': datetime.now(),
            'session_id': f"session_{user_id}_{int(datetime.now().timestamp())}"
        }
    
    def collect_explicit_feedback(self, message_id: str, rating: int, 
                                 helpful: bool = True) -> bool:
        """–°–±–æ—Ä —è–≤–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–µ–π—Ç–∏–Ω–≥ 1-5)"""
        if message_id not in self.pending_feedback:
            logger.warning(f"No pending feedback for message_id: {message_id}")
            return False
        
        interaction = self.pending_feedback[message_id]
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ ML Router
        success = ml_router.record_interaction(
            message=interaction['message'],
            selected_agent=interaction['selected_agent'],
            user_id=interaction['user_id'],
            session_id=interaction['session_id'],
            user_rating=rating,
            response_relevance=1.0 if helpful else 0.2
        )
        
        if success:
            logger.info(f"Recorded explicit feedback: rating={rating}, helpful={helpful}")
            del self.pending_feedback[message_id]
        
        return success
    
    def collect_implicit_feedback(self, message_id: str, 
                                follow_up_questions: int = 0,
                                conversation_continued: bool = True) -> bool:
        """–°–±–æ—Ä –Ω–µ—è–≤–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if message_id not in self.pending_feedback:
            return False
        
        interaction = self.pending_feedback[message_id]
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        # –ú–µ–Ω—å—à–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ = –ª—É—á—à–µ –æ—Ç–≤–µ—Ç
        relevance = max(0.1, 1.0 - (follow_up_questions * 0.2))
        
        # –ï—Å–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä –ø—Ä–æ–¥–æ–ª–∂–∏–ª—Å—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ - —ç—Ç–æ —Ö–æ—Ä–æ—à–∏–π –∑–Ω–∞–∫
        if conversation_continued:
            relevance = min(1.0, relevance + 0.2)
        
        success = ml_router.record_interaction(
            message=interaction['message'],
            selected_agent=interaction['selected_agent'],
            user_id=interaction['user_id'],
            session_id=interaction['session_id'],
            response_relevance=relevance
        )
        
        if success:
            logger.info(f"Recorded implicit feedback: relevance={relevance:.2f}")
            del self.pending_feedback[message_id]
        
        return success

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
feedback_collector = FeedbackCollector()

def add_feedback_buttons_to_response(response: Dict[str, Any], message_id: str) -> Dict[str, Any]:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∫ –æ—Ç–≤–µ—Ç—É"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    response['feedback'] = {
        'message_id': message_id,
        'rating_enabled': True,
        'like_dislike_enabled': True,
        'quick_feedback': [
            {'text': 'üëç', 'value': 'like', 'type': 'like'},
            {'text': 'üëé', 'value': 'dislike', 'type': 'dislike'},
            {'text': 'üîÑ –î—Ä—É–≥–æ–π –∞–≥–µ–Ω—Ç', 'value': 'wrong_agent', 'type': 'other'}
        ],
        'star_rating': {
            'enabled': True,
            'max_stars': 5,
            'placeholder': '–û—Ü–µ–Ω–∏—Ç–µ –æ—Ç–≤–µ—Ç'
        }
    }
    
    return response

def process_like_dislike_feedback(message_id: str, feedback_type: str, user_comment: str = None) -> bool:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫/–¥–∏–∑–ª–∞–π–∫ —Ñ–∏–¥–±–µ–∫–∞"""
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ª–∞–π–∫/–¥–∏–∑–ª–∞–π–∫ –≤ —Ä–µ–π—Ç–∏–Ω–≥
    rating_map = {
        'like': 5,      # –õ–∞–π–∫ = 5 –∑–≤–µ–∑–¥
        'dislike': 1,   # –î–∏–∑–ª–∞–π–∫ = 1 –∑–≤–µ–∑–¥–∞
        'wrong_agent': 2  # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç = 2 –∑–≤–µ–∑–¥—ã
    }
    
    helpful_map = {
        'like': True,
        'dislike': False,
        'wrong_agent': False
    }
    
    if message_id not in feedback_collector.pending_feedback:
        logger.warning(f"No pending feedback for message_id: {message_id}")
        return False
    
    rating = rating_map.get(feedback_type, 3)
    helpful = helpful_map.get(feedback_type, True)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∏–¥–±–µ–∫
    success = feedback_collector.collect_explicit_feedback(
        message_id=message_id,
        rating=rating,
        helpful=helpful
    )
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ
    if user_comment and success:
        try:
            interaction = feedback_collector.pending_feedback.get(message_id)
            if interaction:
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                logger.info(f"User comment for {message_id}: {user_comment}")
        except Exception as e:
            logger.error(f"Failed to save user comment: {e}")
    
    return success