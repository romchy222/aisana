#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ª–∞–π–∫/–¥–∏–∑–ª–∞–π–∫ —Å ML –æ–±—É—á–µ–Ω–∏–µ–º
"""

import sys
import os
sys.path.append('.')

def test_complete_feedback_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Å–∏—Å—Ç–µ–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    
    print("="*70)
    print("–¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –õ–ê–ô–ö/–î–ò–ó–õ–ê–ô–ö –° ML –û–ë–£–ß–ï–ù–ò–ï–ú")
    print("="*70)
    
    from feedback_system import feedback_collector, process_like_dislike_feedback
    from ml_router import ml_router
    
    # 1. –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    print("\n1. –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π")
    print("-" * 50)
    
    test_interactions = [
        ("—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Ä–∞–±–æ—Ç–µ", "career_navigator", "like"),
        ("–ø—Ä–æ–±–ª–µ–º—ã –≤ –æ–±—â–µ–∂–∏—Ç–∏–∏", "uniroom", "like"), 
        ("–∫–∞–∫ –ø–æ—Å—Ç—É–ø–∏—Ç—å", "ai_abitur", "dislike"),
        ("—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π", "uninav", "like"),
        ("–≤–æ–ø—Ä–æ—Å—ã –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ", "kadrai", "like"),
        ("–Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É –¥–ª—è –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤", "career_navigator", "like"),
        ("–∑–∞—Å–µ–ª–µ–Ω–∏–µ –≤ –æ–±—â–µ–∂–∏—Ç–∏–µ", "uniroom", "like"),
        ("–¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è", "ai_abitur", "dislike"),
    ]
    
    for i, (message, agent, feedback_type) in enumerate(test_interactions, 1):
        message_id = f"test_msg_{i}"
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
        feedback_collector.register_interaction(
            message_id, message, agent, f"user_{i}"
        )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∏–¥–±–µ–∫
        success = process_like_dislike_feedback(message_id, feedback_type)
        
        print(f"{'‚úÖ' if success else '‚ùå'} {message} ‚Üí {agent} ({feedback_type})")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—É—á–µ–Ω–∏–µ ML —Å–∏—Å—Ç–µ–º—ã
    print("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—É—á–µ–Ω–∏—è ML —Å–∏—Å—Ç–µ–º—ã")
    print("-" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è
    test_predictions = [
        "—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Ä–∞–±–æ—Ç–µ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤",
        "–ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ—Å–µ–¥—è–º–∏ –≤ –æ–±—â–µ–∂–∏—Ç–∏–∏",
        "–∫–∞–∫ –ø–æ–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ"
    ]
    
    for message in test_predictions:
        agent, confidence, explanation = ml_router.predict_best_agent(message)
        print(f"'{message}'")
        print(f"  ‚Üí –ê–≥–µ–Ω—Ç: {agent} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.3f})")
        print(f"  ‚Üí –ú–µ—Ç–æ–¥: {explanation.get('method', 'unknown')}")
        
        if 'best_matches' in explanation and explanation['best_matches']:
            best_match = explanation['best_matches'][0]
            print(f"  ‚Üí –õ—É—á—à–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω: '{best_match['pattern']}' (—Å—Ö–æ–¥—Å—Ç–≤–æ: {best_match['similarity']:.3f})")
        print()
    
    # 3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    print("3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è")
    print("-" * 50)
    
    stats = ml_router.get_learning_statistics()
    print(f"–í—Å–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {stats.get('total_interactions', 0)}")
    print(f"–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {stats.get('cached_patterns', 0)}")
    
    print("\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–≥–µ–Ω—Ç–∞–º:")
    for agent, data in stats.get('agent_statistics', {}).items():
        print(f"  {agent}:")
        print(f"    - –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {data['interactions']}")
        print(f"    - –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {data['avg_rating']:.2f}")
        print(f"    - –°—Ä–µ–¥–Ω—è—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {data['avg_relevance']:.2f}")
    
    # 4. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è API endpoints
    print("\n4. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è API endpoints")
    print("-" * 50)
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º API –≤—ã–∑–æ–≤—ã
    test_api_data = [
        {"message_id": "api_test_1", "is_like": True},
        {"message_id": "api_test_2", "is_like": False},
        {"message_id": "api_test_3", "feedback_type": "like"},
    ]
    
    print("API endpoints –≥–æ—Ç–æ–≤—ã –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ:")
    print("  ‚úÖ POST /api/feedback/like-dislike")
    print("  ‚úÖ POST /api/feedback/quick") 
    print("  ‚úÖ POST /api/feedback/rate")
    print("  ‚úÖ GET /api/feedback/stats")
    
    print("\n" + "="*70)
    print("üéâ –°–ò–°–¢–ï–ú–ê –õ–ê–ô–ö/–î–ò–ó–õ–ê–ô–ö –° ML –û–ë–£–ß–ï–ù–ò–ï–ú –ì–û–¢–û–í–ê!")
    print("="*70)
    
    print("\n–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã:")
    print("üëç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫–∏/–¥–∏–∑–ª–∞–π–∫–∏")
    print("ü§ñ ML Router —É—á–∏—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ feedback'–∞")
    print("üìä –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã")
    print("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏")
    print("üéØ –í—ã—Å–æ–∫–æ—Ç–æ—á–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤")
    
    return True

if __name__ == '__main__':
    success = test_complete_feedback_system()
    print(f"\n{'üöÄ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!' if success else '‚ùå –ï—Å—Ç—å –æ—à–∏–±–∫–∏'}")