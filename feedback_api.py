#!/usr/bin/env python3
"""
API endpoints –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
Feedback API for ML Router Learning System
"""

import logging
from flask import Blueprint, request, jsonify
from feedback_system import feedback_collector

logger = logging.getLogger(__name__)

# Blueprint –¥–ª—è API –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
feedback_bp = Blueprint('feedback', __name__, url_prefix='/api/feedback')

@feedback_bp.route('/rate', methods=['POST'])
def rate_response():
    """Endpoint –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({'success': False, 'error': 'No data provided'}), 400
        
        message_id = data.get('message_id')
        rating = data.get('rating')  # 1-5 stars
        helpful = data.get('helpful', True)  # boolean
        
        if not message_id:
            return jsonify({'success': False, 'error': 'message_id required'}), 400
        
        if rating is not None and (not isinstance(rating, int) or rating < 1 or rating > 5):
            return jsonify({'success': False, 'error': 'Rating must be 1-5'}), 400
        
        # Record feedback
        success = feedback_collector.collect_explicit_feedback(
            message_id=message_id,
            rating=rating if rating is not None else (5 if helpful else 1),
            helpful=helpful
        )
        
        if success:
            logger.info(f"Collected feedback for message {message_id}: rating={rating}, helpful={helpful}")
            return jsonify({'success': True, 'message': '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!'})
        else:
            return jsonify({'success': False, 'error': 'Failed to record feedback'}), 500
            
    except Exception as e:
        logger.error(f"Error in rate_response: {e}")
        return jsonify({'success': False, 'error': 'Internal server error'}), 500

@feedback_bp.route('/quick', methods=['POST'])
def quick_feedback():
    """Endpoint –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (–∫–Ω–æ–ø–∫–∏ –ª–∞–π–∫/–¥–∏–∑–ª–∞–π–∫)"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({'success': False, 'error': 'No data provided'}), 400
        
        message_id = data.get('message_id')
        feedback_type = data.get('feedback_type')  # 'like', 'dislike', 'wrong_agent'
        user_comment = data.get('comment', '')  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        
        if not message_id or not feedback_type:
            return jsonify({'success': False, 'error': 'message_id and feedback_type required'}), 400
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
        from feedback_system import process_like_dislike_feedback
        
        success = process_like_dislike_feedback(message_id, feedback_type, user_comment)
        
        if success:
            messages = {
                'like': '–°–ø–∞—Å–∏–±–æ –∑–∞ –ª–∞–π–∫! üëç',
                'dislike': '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º. üëé',
                'wrong_agent': '–°–ø–∞—Å–∏–±–æ! –ú—ã –Ω–∞—É—á–∏–º —Å–∏—Å—Ç–µ–º—É –ª—É—á—à–µ –≤—ã–±–∏—Ä–∞—Ç—å –∞–≥–µ–Ω—Ç–æ–≤. üîÑ'
            }
            return jsonify({
                'success': True, 
                'message': messages.get(feedback_type, '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!')
            })
        else:
            return jsonify({'success': False, 'error': 'Failed to record feedback'}), 500
            
    except Exception as e:
        logger.error(f"Error in quick_feedback: {e}")
        return jsonify({'success': False, 'error': 'Internal server error'}), 500

@feedback_bp.route('/like-dislike', methods=['POST'])
def like_dislike_feedback():
    """–û—Ç–¥–µ–ª—å–Ω—ã–π endpoint —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –ª–∞–π–∫/–¥–∏–∑–ª–∞–π–∫"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({'success': False, 'error': 'No data provided'}), 400
        
        message_id = data.get('message_id')
        is_like = data.get('is_like')  # True –¥–ª—è –ª–∞–π–∫–∞, False –¥–ª—è –¥–∏–∑–ª–∞–π–∫–∞
        comment = data.get('comment', '')
        
        if not message_id or is_like is None:
            return jsonify({'success': False, 'error': 'message_id and is_like required'}), 400
        
        feedback_type = 'like' if is_like else 'dislike'
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
        from feedback_system import process_like_dislike_feedback
        
        success = process_like_dislike_feedback(message_id, feedback_type, comment)
        
        if success:
            message = '–°–ø–∞—Å–∏–±–æ –∑–∞ –ª–∞–π–∫! üëç' if is_like else '–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–∏–∑–ª–∞–π–∫! –ú—ã —É—á—Ç–µ–º –≤–∞—à –æ—Ç–∑—ã–≤. üëé'
            return jsonify({
                'success': True, 
                'message': message,
                'feedback_recorded': True
            })
        else:
            return jsonify({'success': False, 'error': 'Failed to record feedback'}), 500
            
    except Exception as e:
        logger.error(f"Error in like_dislike_feedback: {e}")
        return jsonify({'success': False, 'error': 'Internal server error'}), 500

@feedback_bp.route('/implicit', methods=['POST'])
def implicit_feedback():
    """Endpoint –¥–ª—è –Ω–µ—è–≤–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (–ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏)"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({'success': False, 'error': 'No data provided'}), 400
        
        message_id = data.get('message_id')
        follow_up_questions = data.get('follow_up_questions', 0)
        conversation_continued = data.get('conversation_continued', True)
        
        if not message_id:
            return jsonify({'success': False, 'error': 'message_id required'}), 400
        
        success = feedback_collector.collect_implicit_feedback(
            message_id=message_id,
            follow_up_questions=follow_up_questions,
            conversation_continued=conversation_continued
        )
        
        if success:
            logger.info(f"Collected implicit feedback for message {message_id}")
            return jsonify({'success': True})
        else:
            return jsonify({'success': False, 'error': 'Failed to record feedback'}), 500
            
    except Exception as e:
        logger.error(f"Error in implicit_feedback: {e}")
        return jsonify({'success': False, 'error': 'Internal server error'}), 500

@feedback_bp.route('/stats', methods=['GET'])
def get_feedback_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è ML Router"""
    try:
        from ml_router import ml_router
        
        stats = ml_router.get_learning_statistics()
        
        return jsonify({
            'success': True,
            'stats': stats
        })
        
    except Exception as e:
        logger.error(f"Error getting feedback stats: {e}")
        return jsonify({'success': False, 'error': 'Internal server error'}), 500