import { BOT_AVATAR, TYPING_INDICATOR, SUGGESTIONS } from './constants.js';
import { saveHistory } from './storage.js';

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä Markdown/HTML
function renderFormattedText(htmlOrText) {
  // –ï—Å–ª–∏ –µ—Å—Ç—å DOMPurify + marked, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
  if (window.marked && typeof window.marked.parse === 'function') {
    const raw = window.marked.parse(htmlOrText);
    if (window.DOMPurify && typeof window.DOMPurify.sanitize === 'function') {
      return window.DOMPurify.sanitize(raw, { USE_PROFILES: { html: true } });
    }
    // fallback ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º raw, –Ω–æ —ç—Ç–æ —Ä–∏—Å–∫ XSS
    return raw;
  }
  // plain text fallback
  const span = document.createElement('span');
  span.textContent = htmlOrText;
  return span.innerHTML;
}

// –°–æ–∑–¥–∞–Ω–∏–µ bubble –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
export function createMessageBubble(msg) {
  const bubble = document.createElement('div');
  bubble.className = `chat-bubble bubble-${msg.who || 'bot'}`;

  if (msg.typing) bubble.setAttribute('data-typing', 'true');
  let innerHTML = '';

  if (msg.who === 'bot') {
    innerHTML += BOT_AVATAR;
  }

  const formatted = renderFormattedText(msg.text || '');

  innerHTML += `<div class="message-content${msg.error ? ' error' : ''}">${formatted}</div>`;

  // –ë–ª–æ–∫ –æ—Ü–µ–Ω–∫–∏ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞ –±–µ–∑ typing/error –∏ –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ü–µ–Ω–∫–∏
  if (msg.who === 'bot' && !msg.typing && !msg.error && !msg.user_rating) {
    innerHTML += `
      <div class="message-actions" role="group" aria-label="–û—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–∞">
        <button class="like-btn" data-rating="like" title="–ü–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç" aria-label="–ü–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç" aria-pressed="false">
          <span class="material-symbols-outlined">thumb_up</span>
        </button>
        <button class="dislike-btn" data-rating="dislike" title="–ù–µ–ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç" aria-label="–ù–µ–ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç" aria-pressed="false">
          <span class="material-symbols-outlined">thumb_down</span>
        </button>
      </div>
    `;
  } else if (msg.who === 'bot' && !msg.typing && !msg.error && msg.user_rating) {
    innerHTML += `<div class="message-rated">${msg.user_rating === 'like' ? 'üëç –°–ø–∞—Å–∏–±–æ!' : 'üëé –ü—Ä–∏–Ω—è—Ç–æ'}</div>`;
  }

  bubble.innerHTML = innerHTML;

  if (msg.who === 'bot' && msg.id) {
    bubble.setAttribute('data-message-id', msg.id);
  }

  return bubble;
}

// –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç—å typing)
export function appendMessage(msg, messages, chatHistory, renderMessage) {
  if (msg.replaceTyping) {
    replaceTypingWithAnswer(msg, chatHistory, renderMessage);
    // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞
    messages.push({ ...msg, who: 'bot' });
    saveHistory(messages);
  } else {
    renderMessage(msg, chatHistory);
    if (!msg.typing) {
      messages.push(msg);
      saveHistory(messages);
    }
    scrollDown(chatHistory, true);
  }
}

// –ó–∞–º–µ–Ω—è–µ—Ç typing bubble –Ω–∞ –æ—Ç–≤–µ—Ç (–∏—â–µ—Ç –ø–æ DOM)
function replaceTypingWithAnswer(msg, chatHistory, renderMessage) {
  // –ò—â–µ–º bubble, —É –∫–æ—Ç–æ—Ä–æ–≥–æ data-typing="true"
  const bubble = chatHistory.querySelector('.chat-bubble.bubble-bot[data-typing="true"]');
  if (bubble) {
    const content = bubble.querySelector('.message-content');
    if (content) {
      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–Ω–¥–µ—Ä–∏–º
      if (window.marked && typeof window.marked.parse === 'function') {
        content.innerHTML = renderFormattedText(msg.text || '');
      } else {
        content.textContent = msg.text || '';
      }
      bubble.removeAttribute('data-typing');
      // –î–æ–±–∞–≤–∏–º data-message-id –µ—Å–ª–∏ –µ—Å—Ç—å id
      if (msg.id) bubble.setAttribute('data-message-id', msg.id);
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–æ—á–Ω—ã–π –±–ª–æ–∫ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) ‚Äî –ø—Ä–æ—â–µ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å bubble:
      const newBubble = createMessageBubble({ ...msg, who: 'bot' });
      bubble.replaceWith(newBubble);
    }
  } else {
    // –ï—Å–ª–∏ typing –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ—Å—Ç–æ —Ä–µ–Ω–¥–µ—Ä–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    renderMessage(msg, chatHistory);
    scrollDown(chatHistory, true);
  }
}

// –†–µ–Ω–¥–µ—Ä –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
export function renderAllMessages(messages, chatHistory, renderMessage, renderSuggestions) {
  chatHistory.innerHTML = '';
  (messages || []).forEach(msg => renderMessage(msg, chatHistory));
  scrollDown(chatHistory, false);
  renderSuggestions();
}

// –£–¥–∞–ª–∏—Ç—å typing-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
export function removeTyping(chatHistory) {
  // –ù–∞–¥—ë–∂–Ω–æ: –∏—â–µ–º –ø—É–∑—ã—Ä—å–∫–∏ —Å data-typing
  const typingBubbles = chatHistory.querySelectorAll('.chat-bubble[data-typing="true"]');
  typingBubbles.forEach(b => b.remove());
  scrollDown(chatHistory, true);
}

// –†–µ–Ω–¥–µ—Ä –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç createMessageBubble)
export function renderMessage(msg, chatHistory) {
  chatHistory.appendChild(createMessageBubble(msg));
  scrollDown(chatHistory, true);
}

// –¢–∞–π–ø–∏–Ω–≥ —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞ (–º–æ–∂–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –∏–¥—ë—Ç –∑–∞–º–µ–Ω–∞ —á–µ—Ä–µ–∑ appendMessage)
export async function typeBotMessage(text, msgmeta, messages, chatHistory) {
  appendMessage({ text, who: 'bot', ...msgmeta, replaceTyping: true }, messages, chatHistory, renderMessage);
}

export function renderSuggestions(messages, suggestionsDiv) {
  if (messages.length === 0) {
    suggestionsDiv.innerHTML = SUGGESTIONS.map(txt => `<button class="suggest-btn">${txt}</button>`).join('');
    suggestionsDiv.style.display = 'block';
  } else {
    suggestionsDiv.style.display = 'none';
  }
}

export function scrollDown(chatHistory, smooth = true) {
  try {
    chatHistory.scrollTo({
      top: chatHistory.scrollHeight,
      behavior: smooth ? 'smooth' : 'auto'
    });
  } catch (err) {
    // fallback
    chatHistory.scrollTop = chatHistory.scrollHeight;
  }
}

// === –õ–û–ì–ò–ö–ê –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ (–ª–∞–π–∫/–¥–∏–∑–ª–∞–π–∫) ===

export function initRatingHandler(chatHistory, messages) {
  chatHistory.addEventListener('click', async (e) => {
    if (e.target.classList.contains('like-btn') || e.target.classList.contains('dislike-btn')) {
      const button = e.target;
      // –ú—ã –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å msg.id, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –µ—Å—Ç—å –≤ data-message-id
      const msgId = button.closest('.chat-bubble').getAttribute('data-message-id');
      const rating = button.classList.contains('like-btn') ? 'like' : 'dislike';

      if (!msgId) return;

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
      button.style.opacity = '0.5';
      button.disabled = true;

      try {
        const response = await fetch(`/api/rate/${encodeURIComponent(msgId)}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ rating })
        });

        const data = await response.json();

        if (data.success) {
          // –û–±–Ω–æ–≤–ª—è–µ–º UI - –ø–æ–º–µ—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
          const messageDiv = button.closest('.message-actions');
          const likeBtn = messageDiv.querySelector('.like-btn');
          const dislikeBtn = messageDiv.querySelector('.dislike-btn');

          likeBtn.classList.remove('selected', 'like-selected');
          dislikeBtn.classList.remove('selected', 'dislike-selected');

          if (rating === 'like') {
            button.classList.add('selected', 'like-selected');
            button.innerHTML = 'üëç'; // –ò–ª–∏ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É –∏–∑ <span class="material-symbols-outlined">thumb_up</span>
          } else {
            button.classList.add('selected', 'dislike-selected');
            button.innerHTML = 'üëé'; // –ò–ª–∏ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É –∏–∑ <span class="material-symbols-outlined">thumb_down</span>
          }

          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —É—Å–ø–µ—Ö–∞
          button.style.transform = 'scale(1.2)';
          setTimeout(() => {
            button.style.transform = 'scale(1)';
          }, 150);
        } else {
          console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', data.error);
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          button.innerHTML = '‚ùå';
          setTimeout(() => {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∫–æ–Ω–æ–∫
            const originalIcon = rating === 'like' ? '<span class="material-symbols-outlined">thumb_up</span>' : '<span class="material-symbols-outlined">thumb_down</span>';
            button.innerHTML = originalIcon;
          }, 1000);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ü–µ–Ω–∫–∏:', error);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        button.innerHTML = '‚ùå';
        setTimeout(() => {
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∫–æ–Ω–æ–∫
          const originalIcon = rating === 'like' ? '<span class="material-symbols-outlined">thumb_up</span>' : '<span class="material-symbols-outlined">thumb_down</span>';
          button.innerHTML = originalIcon;
        }, 1000);
      } finally {
        button.style.opacity = '1';
        button.disabled = false;
      }
    }
  });
}