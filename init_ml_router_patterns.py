
#!/usr/bin/env python3
"""
–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML Router —Å –±–∞–∑–æ–≤—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ –æ–±—É—á–µ–Ω–∏—è
"""

import sys
import os
sys.path.append('.')

from ml_router import ml_router
from datetime import datetime

def init_basic_patterns():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è ML Router"""
    
    print("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML Router —Å –±–∞–∑–æ–≤—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏...")
    
    # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
    training_patterns = [
        # Career Navigator
        ("–∫–∞–∫ –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É", "career_navigator", 5, 0.9),
        ("–≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", "career_navigator", 5, 0.9),
        ("—Ä–µ–∑—é–º–µ –ø–æ–º–æ—â—å", "career_navigator", 4, 0.8),
        ("—Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤", "career_navigator", 5, 0.9),
        ("–∫–∞—Ä—å–µ—Ä–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "career_navigator", 4, 0.8),
        ("—Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã", "career_navigator", 4, 0.8),
        ("—Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—ã", "career_navigator", 4, 0.7),
        
        # UniNav (–∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã)
        ("—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π", "uninav", 5, 0.9),
        ("—ç–∫–∑–∞–º–µ–Ω—ã –∫–æ–≥–¥–∞", "uninav", 5, 0.9),
        ("–∑–∞—á–µ—Ç—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "uninav", 5, 0.9),
        ("—É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω", "uninav", 4, 0.8),
        ("–ª–µ–∫—Ü–∏–∏ —Å–µ–º–∏–Ω–∞—Ä—ã", "uninav", 4, 0.8),
        ("—Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", "uninav", 4, 0.8),
        ("–∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å", "uninav", 4, 0.7),
        ("–±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–æ—Å—Ç—É–ø", "uninav", 4, 0.7),
        
        # AI Abitur (–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ)
        ("–∫–∞–∫ –ø–æ—Å—Ç—É–ø–∏—Ç—å", "ai_abitur", 5, 0.9),
        ("–¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ", "ai_abitur", 5, 0.9),
        ("–∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "ai_abitur", 5, 0.9),
        ("–≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ —ç–∫–∑–∞–º–µ–Ω—ã", "ai_abitur", 5, 0.9),
        ("—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è", "ai_abitur", 4, 0.8),
        ("—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã", "ai_abitur", 4, 0.8),
        ("—Å—Ä–æ–∫–∏ –ø–æ–¥–∞—á–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "ai_abitur", 4, 0.8),
        ("–ø—Ä–æ—Ö–æ–¥–Ω—ã–µ –±–∞–ª–ª—ã", "ai_abitur", 4, 0.7),
        
        # Kadrai (HR –≤–æ–ø—Ä–æ—Å—ã)
        ("–æ—Ç–ø—É—Å–∫ –∑–∞—è–≤–ª–µ–Ω–∏–µ", "kadrai", 5, 0.9),
        ("–∑–∞—Ä–ø–ª–∞—Ç–∞ –≤–æ–ø—Ä–æ—Å—ã", "kadrai", 5, 0.9),
        ("–∫–∞–¥—Ä–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã", "kadrai", 5, 0.9),
        ("–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –≤–∞–∫–∞–Ω—Å–∏–∏", "kadrai", 4, 0.8),
        ("—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "kadrai", 4, 0.8),
        ("—Ç—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä", "kadrai", 4, 0.7),
        ("–±–æ–ª—å–Ω–∏—á–Ω—ã–π –ª–∏—Å—Ç", "kadrai", 4, 0.7),
        
        # UniRoom (–æ–±—â–µ–∂–∏—Ç–∏–µ)
        ("–æ–±—â–µ–∂–∏—Ç–∏–µ –∑–∞—Å–µ–ª–µ–Ω–∏–µ", "uniroom", 5, 0.9),
        ("–∫–æ–º–Ω–∞—Ç–∞ –ø—Ä–æ–±–ª–µ–º—ã", "uniroom", 5, 0.9),
        ("–ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏—è", "uniroom", 4, 0.8),
        ("–ø–µ—Ä–µ—Å–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–∂–∏—Ç–∏–µ", "uniroom", 4, 0.8),
        ("—Å–æ—Å–µ–¥–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã", "uniroom", 4, 0.8),
        ("–ø–ª–∞—Ç–∞ –æ–±—â–µ–∂–∏—Ç–∏–µ", "uniroom", 4, 0.7),
        ("–±—ã—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã", "uniroom", 4, 0.7),
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É
    success_count = 0
    for message, agent, rating, relevance in training_patterns:
        try:
            success = ml_router.record_interaction(
                message=message,
                selected_agent=agent,
                user_id="system_init",
                session_id="pattern_init",
                user_rating=rating,
                response_relevance=relevance
            )
            if success:
                success_count += 1
                print(f"‚úÖ {message} ‚Üí {agent}")
            else:
                print(f"‚ùå {message} ‚Üí {agent}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è '{message}': {e}")
    
    print(f"\nüéâ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {success_count}/{len(training_patterns)} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    try:
        stats = ml_router.get_learning_statistics()
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ML Router:")
        print(f"- –í—Å–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {stats.get('total_interactions', 0)}")
        print(f"- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {stats.get('cached_patterns', 0)}")
        print(f"- –ê–≥–µ–Ω—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏: {len(stats.get('agent_statistics', {}))}")
        
        for agent, data in stats.get('agent_statistics', {}).items():
            print(f"  ‚Ä¢ {agent}: {data['interactions']} –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π, —Ä–µ–π—Ç–∏–Ω–≥ {data['avg_rating']:.2f}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def test_predictions():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π:")
    print("-" * 50)
    
    test_cases = [
        "–∫–∞–∫ –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É –¥–ª—è –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤",
        "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç–∫–∑–∞–º–µ–Ω–æ–≤",
        "–¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç",
        "–ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ—Å–µ–¥–æ–º –≤ –æ–±—â–µ–∂–∏—Ç–∏–∏",
        "–≤–æ–ø—Ä–æ—Å –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"
    ]
    
    for message in test_cases:
        try:
            agent, confidence, explanation = ml_router.predict_best_agent(message)
            print(f"'{message}'")
            print(f"  ‚Üí –ê–≥–µ–Ω—Ç: {agent} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.3f})")
            print(f"  ‚Üí –ú–µ—Ç–æ–¥: {explanation.get('method', 'unknown')}")
            
            if 'best_matches' in explanation and explanation['best_matches']:
                best_match = explanation['best_matches'][0]
                print(f"  ‚Üí –õ—É—á—à–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω: '{best_match['pattern']}' (—Å—Ö–æ–¥—Å—Ç–≤–æ: {best_match['similarity']:.3f})")
            print()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è '{message}': {e}")

if __name__ == '__main__':
    print("="*70)
    print("–ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ML ROUTER –° –ë–ê–ó–û–í–´–ú–ò –ü–ê–¢–¢–ï–†–ù–ê–ú–ò")
    print("="*70)
    
    init_basic_patterns()
    test_predictions()
    
    print("\n" + "="*70)
    print("‚úÖ ML Router –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ–±—É—á–∞—Ç—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π.")
    print("="*70)
