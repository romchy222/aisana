#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∞–º–æ–æ–±—É—á–∞—é—â–µ–≥–æ—Å—è ML Router
"""

import sys
import os
sys.path.append('.')

from ml_router import ml_router

def test_ml_router():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º ML Router —Å —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ–º"""
    
    print("="*70)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ê–ú–û–û–ë–£–ß–ê–Æ–©–ï–ì–û–°–Ø ML ROUTER")
    print("="*70)
    
    test_cases = [
        "—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Ä–∞–±–æ—Ç–µ",
        "–∫–∞–∫ –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É –¥–ª—è –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤", 
        "—Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤",
        "–ø—Ä–æ–±–ª–µ–º—ã –≤ –æ–±—â–µ–∂–∏—Ç–∏–∏",
        "–∫–∞–∫ –ø–æ—Å—Ç—É–ø–∏—Ç—å –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç"
    ]
    
    print("\n1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è ML Router")
    print("-" * 50)
    
    for i, message in enumerate(test_cases, 1):
        print(f"\n–¢–µ—Å—Ç {i}: '{message}'")
        
        try:
            agent, confidence, explanation = ml_router.predict_best_agent(message)
            print(f"–ê–≥–µ–Ω—Ç: {agent}")
            print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.3f}")
            print(f"–ú–µ—Ç–æ–¥: {explanation.get('method', 'unknown')}")
            
            if explanation.get('fallback_used'):
                print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback: {explanation.get('fallback_reason')}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("\n2. –°–∏–º—É–ª—è—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è")
    print("-" * 50)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö
    training_examples = [
        ("—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Ä–∞–±–æ—Ç–µ", "career_navigator", 5, True),
        ("–≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤", "career_navigator", 4, True),
        ("—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π", "uninav", 5, True),
        ("–ø—Ä–æ–±–ª–µ–º—ã –≤ –æ–±—â–µ–∂–∏—Ç–∏–∏", "uniroom", 4, True),
        ("–¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è", "ai_abitur", 5, True),
    ]
    
    print("–û–±—É—á–∞–µ–º ML Router –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö...")
    for message, agent, rating, helpful in training_examples:
        relevance = 1.0 if helpful else 0.2
        success = ml_router.record_interaction(
            message=message,
            selected_agent=agent,
            user_id="test_user",
            session_id="test_session",
            user_rating=rating,
            response_relevance=relevance
        )
        print(f"{'‚úÖ' if success else '‚ùå'} {message} -> {agent} (—Ä–µ–π—Ç–∏–Ω–≥: {rating})")
    
    print("\n3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—É—á–µ–Ω–∏–µ")
    print("-" * 50)
    
    # –ü–æ–≤—Ç–æ—Ä–Ω–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ –∂–µ –≤–æ–ø—Ä–æ—Å—ã
    for i, message in enumerate(test_cases, 1):
        print(f"\n–ü–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è {i}: '{message}'")
        
        try:
            agent, confidence, explanation = ml_router.predict_best_agent(message)
            print(f"–ê–≥–µ–Ω—Ç: {agent}")
            print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.3f}")
            print(f"–ú–µ—Ç–æ–¥: {explanation.get('method', 'unknown')}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª—É—á—à–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
            if 'best_matches' in explanation and explanation['best_matches']:
                best_match = explanation['best_matches'][0]
                print(f"–õ—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: '{best_match['pattern']}' (—Å—Ö–æ–¥—Å—Ç–≤–æ: {best_match['similarity']:.3f})")
                print(f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {best_match['performance']:.3f}, —Ä–µ–π—Ç–∏–Ω–≥: {best_match['rating']:.1f}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("\n4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è")
    print("-" * 50)
    
    try:
        stats = ml_router.get_learning_statistics()
        print(f"–í—Å–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {stats.get('total_interactions', 0)}")
        print(f"–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {stats.get('cached_patterns', 0)}")
        print(f"–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {stats.get('confidence_threshold', 0)}")
        print(f"–°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è: {stats.get('learning_rate', 0)}")
        
        print("\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–≥–µ–Ω—Ç–∞–º:")
        for agent, data in stats.get('agent_statistics', {}).items():
            print(f"  {agent}: {data['interactions']} –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π, —Ä–µ–π—Ç–∏–Ω–≥ {data['avg_rating']:.2f}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    print("\n" + "="*70)
    print("ü§ñ ML Router –≥–æ—Ç–æ–≤ –∫ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—é!")
    print("–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —É–ª—É—á—à–∞—Ç—å—Å—è —Å –∫–∞–∂–¥—ã–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    print("="*70)

if __name__ == '__main__':
    test_ml_router()